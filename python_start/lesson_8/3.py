# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class CheckValue:
    def __init__(self):
        self.lst = []

    def add_value(self, value):
        if value.isdigit():
            return self.lst.append(int(value))
        if value.lower() == 'stop':
            raise StopException
        if not value.isdigit():
            raise MyException


class MyException(Exception):
    def __init__(self, text="Необходимо вводить только целые числа!"):
        self.text = text

    def __str__(self):
        return self.text

class StopException(Exception):
    def __init__(self, text="Работа программы окончена."):
        self.text = text

    def __str__(self):
        return f'{self.text}'

mc = CheckValue()

while True:
    try:
        value = input(f'Введите целое число, чтобы добавить его в список. \n'
                  f'Если хотите завершить работу программы, введите команду stop: ')
        mc.add_value(value)
    except MyException as e:
        print(e)
    except StopException as se:
        print(se)
        break
print(mc.lst)

