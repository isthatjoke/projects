# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()),
# умножение (mul()), деление (truediv()).Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно
# осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу. Если
# ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: **\n\n.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: **\n\n***.


class Cell:
    def __init__(self, count: int):
        self.count = count

    def __add__(self, other):
        return self.count + other.count

    def __sub__(self, other):
        if (self.count - other.count) > 0:
            return self.count - other.count
        else:
            print(f'Разность клеток 0 или меньше 0, вычитаение невозможно')

    def __mul__(self, other):
        return self.count * other.count

    def __truediv__(self, other):
        return round(self.count / other.count)

    def make_order(self, cell_count):
        cell_in_row = round(self.count / cell_count)
        if (self.count % cell_count) == 0:
            print(f'{cell_count}\n'*int(cell_in_row))
        else:
            cell_remains = self.count // cell_count
            print(f'{cell_count}\n'*int(cell_in_row) +
                  f'{cell_remains}')

a = Cell(10)
b = Cell(20)
print(1)
