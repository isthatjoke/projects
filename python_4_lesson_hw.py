# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
# salary.py
from sys import argv
if len(argv) != 4:
    print("Должно быть 3 аргумента")
else:
    script_name, first_param, second_param, third_param = argv
    try:
        result = (float(first_param) * float(second_param)) + float(third_param)
        print("Заработная плата составляет: ", result)
    except ValueError:
        print("Должно быть 3 аргумента и они должны быть только цифрами")


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
import random
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
final_list = [i for i in my_list if i > my_list[my_list.index(i) - 1]]
print(final_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

my_list = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(my_list)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
# обязательно использовать генератор.


my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if not my_list.count(el) > 1]
print(new_list)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны
# войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения
# всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [el for el in range(99, 1001) if el % 2 == 0]


def total_sum(el, next_el):
    return el + next_el


print(reduce(total_sum, my_list))


# 6. Реализовать два небольших скрипта:
# а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
# count.py

from itertools import count
from sys import argv


if len(argv) != 2:
    print("Должен быть 1 аргумент")
else:
    script_name, first_param = argv
    try:
        first_param = int(first_param)
        for el in count(first_param):
            print(el)
    except ValueError:
        print("Должен быть 1 натуральный цифровой аргумент")

# б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# cycle.py

from itertools import cycle

my_list = ['hello', 1]
for el in cycle(my_list):
    print(el)


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться
# следующим образом: for el in fibo_gen(). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые 15 чисел.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fibo_gen(x):
    start = 1
    j = 0
    for i in range(1, x + 1):
        start = start * i
        yield start
        j += 1
        if j == 15:
            break


for el in fibo_gen(25):
    print(el)


